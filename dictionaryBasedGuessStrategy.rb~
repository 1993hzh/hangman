require 'Set'
require_relative 'WordProvider'

class Dictionary

    @@dictionaryWordSet = initializeSetWithFile
    LETTER_PATTERN = '.'
    
    def initialize(word)
        @word = word
        @currentWord = nil
        @@currentWordSet = @@dictionaryWordSet.dup
    end

    def collectFrequency(game, guessedLetters)
        frequency = nil
        if !(game.word == @currentWord)
            @currentWord = game.word
            frequency = collectFrequency(game.word)
        end
        
        letter = @currentFrequencyTable.keys[@currentIndex]
        return letter
    end
    
    def collectFrequencyInternal(word)
        reg = Regexp.new("^#{word.dup.gsub!(WordProvider::ENCRYPTED_LETTER, LETTER_PATTERN).downcase}$").freeze
        @currentWordSet = @currentWordSet.select!(|w| w.match?(reg))
        
        wordFrequency = Hash.new
        index = word.index(WordProvider::ENCRYPTED_LETTER)
        currentWordSet.each do |w|
            ch = w[index]
            count = wordFrequency.has_key?(ch) ? wordFrequency[ch] : 0
            count = count + 1
            wordFrequency[ch] = count
        end
        
        return wordFrequency.sort_by {|_key, value| value}.reverse.to_h
    end
    
    def initializeSetWithFile
        File.open(File.join(File.dirname(__FILE__), "data/dictionary.txt"), "r") do |f|
            f.each_line do |word|
                @@dictionaryWordSet.add(word.strip)
            end
        end
        return @@dictionaryWordSet.freeze
    end
end
